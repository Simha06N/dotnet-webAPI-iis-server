name: Deployment Pipeline

on:
  push:
    branches:
      - develop  # Change to your branchs

jobs:
  api-deployment:
    runs-on: win2022-server

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set Timestamp Variable
      id: set-timestamp
      run: |
        # Generate a timestamp to create a unique backup folder
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        echo "Timestamp: $timestamp"
        echo "::set-output name=timestamp::$timestamp"

    - name: Checking User Name
      run: |
        # Create a unique backup folder based on the timestamp
         whoami
        
#    - name: Create Unique Backup Folder
#      run: |
#        # Create a unique backup folder based on the timestamp
#        $timestamp = $env:TIMESTAMP
#        $backupFolder = "C:\Backup\SampleAPP\$timestamp"
#        New-Item -Path $backupFolder -ItemType Directory -Force
#        echo "Backup folder created: $backupFolder"
    - name: Create Unique Backup Folder
      run: |
        # Generate a timestamp to create a unique backup folder
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        echo "Timestamp: $timestamp"
        
        # Define the backup folder path
        $backupFolder = "C:\Backup\SampleAPP\$timestamp"
        # Create the backup folder
        if (!(Test-Path -Path $backupFolder -PathType Container)) {
          New-Item -Path $backupFolder -ItemType Directory
          echo "Backup folder created: $backupFolder"
         } else {
           echo "Backup folder already exists: $backupFolder"
         }
      continue-on-error: true  # Continue even if the folder creation fails

    - name: Backup API Deployment Folder
      run: |
        # Copye the existing deployment folder to the unique backup folder
        $timestamp = $env:TIMESTAMP
        $backupFolder = "C:\Backup\SampleAPP\$timestamp"
        $backupFolder = $env:BACKUP_FOLDER
        Copy-Item -Path "C:\SampleAPP\*" -Destination $backupFolder -Recurse -Force
        echo "Backup completed to $backupFolder"

#    - name: Stop App Pool and Website
# #     run: |
#        # Stop the App pool and website in IIS
##        iisreset /stop
#        # Wait for a moment to allow IIS services to stop (adjust the sleep duration as needed)
#        Start-Sleep -Seconds 10

    - name: Stop App Pool and Website
      run: |
        whoami
        # Stop a specific application pool and website in IIS
        $appPoolName = "WeatherAppService"
        $websiteName = "WeatherAppService"
        
        # Check if the application pool exists and is running
        $appPool = Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue
        if ($appPool -ne $null -and $appPool.Value -eq "Started") {
          Stop-WebAppPool -Name $appPoolName
          echo "Stopped application pool: $appPoolName"
        } else {
          echo "Application pool $appPoolName is not running or doesn't exist."
        }

        # Check if the website exists and is running
        $website = Get-Website -Name $websiteName -ErrorAction SilentlyContinue
        if ($website -ne $null -and $website.State -eq "Started") {
          Stop-Website -Name $websiteName
          echo "Stopped website: $websiteName"
        } else {
          echo "Website $websiteName is not running or doesn't exist."
        }
    
    - name: Build API
      run: |
        dotnet --info
        ls
        dotnet build WeatherAPP.csproj --configuration Release

    - name: Replace DLLs
      run: |
        #robocopy ./bin/Release/net6.0/ C:\SampleAPP /MIR
        dotnet publish -c Release -o C:\SampleAPP

    - name: Check for Deployment Issues and Rollback
      run: |
        # Check for deployment issues (e.g., check for a specific file's existence)
        if (-not (Test-Path "C:\SampleAPP\WeatherAPP.dll")) {
          echo "Deployment issues detected. Rolling back..."
          $timestamp = $env:TIMESTAMP
          $backupFolder = "C:\Backup\SampleAPP\$timestamp"
          Copy-Item -Path $backupFolder\* -Destination "C:\SampleAPP" -Recurse -Force  # Restore backup
          iisreset /start  # Restart app pool and website
          exit 1  # Exit with an error code to indicate the deployment failed
        } else {
          echo "Deployment successful."
        }

    - name: Restart App Pool and Website
      run: |
        # Start a specific application pool and website in IIS
        $appPoolName = "WeatherAppService"
        $websiteName = "WeatherAppService"
        
        # Check if the application pool exists and is running
        $appPool = Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue
        if ($appPool -ne $null -and $appPool.Value -eq "Stopped") {
          Start-WebAppPool -Name $appPoolName
          echo "Started application pool: $appPoolName"
        } else {
          echo "Application pool $appPoolName is running....."
        }

        # Check if the website exists and is running
        $website = Get-Website -Name $websiteName -ErrorAction SilentlyContinue
        if ($website -ne $null -and $website.State -eq "Stopped") {
          Start-Website -Name $websiteName
          echo "Started website: $websiteName"
        } else {
          echo "Website $websiteName is running....."
        }

    # Add steps for artifact publishing, creating a release, and interacting with your CD pipeline
